"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const util_1 = require("../util");
const icu_messageformat_parser_1 = require("@formatjs/icu-messageformat-parser");
const manipulator_1 = require("@formatjs/icu-messageformat-parser/manipulator");
function calculateComplexity(ast) {
    if (ast.length === 1) {
        const el = ast[0];
        if ((0, icu_messageformat_parser_1.isPluralElement)(el) || (0, icu_messageformat_parser_1.isSelectElement)(el)) {
            return Object.keys(el.options).reduce((complexity, k) => {
                return complexity + calculateComplexity(el.options[k].value);
            }, 0);
        }
    }
    return 1;
}
function checkNode(context, node) {
    const settings = (0, util_1.getSettings)(context);
    const msgs = (0, util_1.extractMessages)(node, settings);
    if (!msgs.length) {
        return;
    }
    const config = {
        limit: 20,
        ...(context.options[0] || {}),
    };
    for (const [{ message: { defaultMessage }, messageNode, },] of msgs) {
        if (!defaultMessage || !messageNode) {
            continue;
        }
        let ast;
        try {
            ast = (0, icu_messageformat_parser_1.parse)(defaultMessage, {
                ignoreTag: settings.ignoreTag,
            });
        }
        catch (e) {
            context.report({
                node: messageNode,
                message: e instanceof Error ? e.message : String(e),
            });
            return;
        }
        const hoistedAst = (0, manipulator_1.hoistSelectors)(ast);
        const complexity = calculateComplexity(hoistedAst);
        if (complexity > config.limit) {
            context.report({
                node: messageNode,
                message: `Message complexity is too high (${complexity} vs limit at ${config.limit})`,
            });
        }
    }
}
const rule = {
    meta: {
        type: 'problem',
        docs: {
            description: `Make sure a sentence is not too complex. 
Complexity is determined by how many strings are produced when we try to
flatten the sentence given its selectors. For example:
"I have {count, plural, one{a dog} other{many dogs}}"
has the complexity of 2 because flattening the plural selector
results in 2 sentences: "I have a dog" & "I have many dogs".
Default complexity limit is 20 
(using Smartling as a reference: https://help.smartling.com/hc/en-us/articles/360008030994-ICU-MessageFormat)
`,
            category: 'Errors',
            recommended: false,
            url: 'https://formatjs.io/docs/tooling/linter#no-complex-selectors',
        },
        schema: [
            {
                type: 'object',
                properties: {
                    limit: {
                        type: 'number',
                    },
                },
                additionalProperties: false,
            },
        ],
        fixable: 'code',
    },
    create(context) {
        const callExpressionVisitor = (node) => checkNode(context, node);
        if (context.parserServices.defineTemplateBodyVisitor) {
            return context.parserServices.defineTemplateBodyVisitor({
                CallExpression: callExpressionVisitor,
            }, {
                CallExpression: callExpressionVisitor,
            });
        }
        return {
            JSXOpeningElement: (node) => checkNode(context, node),
            CallExpression: callExpressionVisitor,
        };
    },
};
exports.default = rule;
