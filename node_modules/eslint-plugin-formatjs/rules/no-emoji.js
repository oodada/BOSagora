"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const util_1 = require("../util");
const emoji_regex_1 = tslib_1.__importDefault(require("emoji-regex"));
const EMOJI_REGEX = emoji_regex_1.default();
function checkNode(context, node) {
    const msgs = (0, util_1.extractMessages)(node, (0, util_1.getSettings)(context));
    for (const [{ message: { defaultMessage }, messageNode, },] of msgs) {
        if (!defaultMessage || !messageNode) {
            continue;
        }
        if (EMOJI_REGEX.test(defaultMessage)) {
            context.report({
                node: messageNode,
                message: 'Emojis are not allowed',
            });
        }
    }
}
const rule = {
    meta: {
        type: 'problem',
        docs: {
            description: 'Disallow emojis in message',
            category: 'Errors',
            recommended: false,
            url: 'https://formatjs.io/docs/tooling/linter#no-emoji',
        },
        fixable: 'code',
    },
    create(context) {
        const callExpressionVisitor = (node) => checkNode(context, node);
        if (context.parserServices.defineTemplateBodyVisitor) {
            return context.parserServices.defineTemplateBodyVisitor({
                CallExpression: callExpressionVisitor,
            }, {
                CallExpression: callExpressionVisitor,
            });
        }
        return {
            JSXOpeningElement: (node) => checkNode(context, node),
            CallExpression: callExpressionVisitor,
        };
    },
};
exports.default = rule;
