"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ALLOW_COMPONENT_DID_CATCH = exports.COMPONENT_SHOULD_BE_FUNCTION = void 0;
exports.COMPONENT_SHOULD_BE_FUNCTION = "componentShouldBeFunction";
exports.ALLOW_COMPONENT_DID_CATCH = "allowComponentDidCatch";
const COMPONENT_DID_CATCH = "componentDidCatch";
const PROGRAM_EXIT = "Program:exit";
const VARIABLE_DECLARATOR = "VariableDeclarator";
const rule = {
    meta: {
        docs: {
            description: "Enforce components are written as function components",
            category: "Stylistic Issues",
            recommended: false,
            suggestion: false,
            url: "https://github.com/tatethurston/eslint-plugin-react-prefer-function-component#rule-details",
        },
        type: "problem",
        messages: {
            [exports.COMPONENT_SHOULD_BE_FUNCTION]: "Class component should be written as a function",
        },
        schema: [
            {
                type: "object",
                properties: {
                    [exports.ALLOW_COMPONENT_DID_CATCH]: {
                        default: true,
                        type: "boolean",
                    },
                },
                additionalProperties: false,
            },
        ],
    },
    create(context) {
        var _a, _b;
        const allowComponentDidCatch = (_b = (_a = context.options[0]) === null || _a === void 0 ? void 0 : _a.allowComponentDidCatch) !== null && _b !== void 0 ? _b : true;
        function shouldPreferFunction(node) {
            const properties = node.body.body;
            const hasComponentDidCatch = properties.find((property) => { var _a; return ((_a = property.key) === null || _a === void 0 ? void 0 : _a.name) === COMPONENT_DID_CATCH; }) !== undefined;
            if (hasComponentDidCatch && allowComponentDidCatch) {
                return false;
            }
            return true;
        }
        const components = new Set();
        function detect(node) {
            if (shouldPreferFunction(node)) {
                components.add(node);
            }
        }
        return {
            "ClassDeclaration:has(JSXElement)": detect,
            "ClassDeclaration:has(JSXFragment)": detect,
            "ClassDeclaration[superClass.object.name='React'][superClass.property.name='Component']": detect,
            "ClassDeclaration[superClass.name='Component']": detect,
            "ClassExpression:has(JSXElement)": detect,
            "ClassExpression:has(JSXFragment)": detect,
            "ClassExpression[superClass.object.name='React'][superClass.property.name='Component']": detect,
            "ClassExpression[superClass.name='Component']": detect,
            [PROGRAM_EXIT]() {
                components.forEach((node) => {
                    if (node.id) {
                        node = node.id;
                    }
                    else if (node.parent.type == VARIABLE_DECLARATOR) {
                        node = node.parent.id;
                    }
                    context.report({
                        node,
                        messageId: exports.COMPONENT_SHOULD_BE_FUNCTION,
                    });
                });
            },
        };
    },
};
exports.default = rule;
